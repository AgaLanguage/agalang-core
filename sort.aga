fn ordenar(lista) {
  def fin_c = lista::longitud;
  si fin_c <= 1 {
    ret lista;
  }
  fn medioDeTres(ini, fin) {
    def mid = (ini + fin) // 2;
    def a = lista[ini];
    def b = lista[mid];
    def c = lista[fin];
    si a > b { def t = a; a = b; b = t; }
    si b > c { def t = b; b = c; c = t; }
    si a > b { def t = a; a = b; b = t; }
    si b == lista[ini] ret ini;
    si b == lista[mid] ret mid;
    ret fin;
  }
  fn posicionPivote(ini, fin) {
    const pivIdx = medioDeTres(ini, fin);
    const pivote = lista[pivIdx];
    def temp1 = lista[pivIdx];
    lista[pivIdx] = lista[fin];
    lista[fin] = temp1;

    def i = ini;
    def j = ini;
    mien j < fin {
      si lista[j] < pivote {
        def temp = lista[i];
        lista[i] = lista[j];
        lista[j] = temp;
        i+=1;
      }
      j+=1;
    }
    def temp = lista[i];
    lista[i] = lista[fin];
    lista[fin] = temp;
    ret i;
  }
  fn quicksort(ini, fin) {
    si ini < fin {
      const piv = posicionPivote(ini, fin);
      quicksort(ini, piv - 1);
      quicksort(piv + 1, fin);
    }
  }

  quicksort(0, fin_c - 1);
  ret lista;
}
exporta nombre ordenar;