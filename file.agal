fn max(a,b){
  si a > b ret a;
  ret b;
}
fn min(a,b) {
  si a < b ret a;
  ret b;
}
def Mate = {
  max,
  min
};
def lista = [1,7,2,6,3,5,4];
ordenar(lista);
csl << lista;
fn ordenar(lista) {
  def fin_c = lista::longitud;
  si fin_c <= 0 {
    ret lista;
  }
  fn medioDeTres(ini, fin) {
      def a = lista[ini];
      def b = lista[fin];
      def c = lista[~((ini + fin) / 2)];
      ret Mate::min(Mate::max(a,b),Mate::max(b,c), Mate::max(c,a));
  }
  fn posicionPivote(ini, fin) {
    const pivote = medioDeTres(ini, fin);
    def i = ini;
    def j = ini;
    mien j < fin{
      si lista[j] < pivote {
        def temp = lista[i];
        lista[i] = lista[j];
        lista[j] = temp;
        i+=1;
      }
      j+=1;
    }
    def temp = lista[i];
    lista[i] = lista[fin];
    lista[fin] = temp;
    ret i;
  }
  fn quicksort(ini, fin) {
    si ini < fin {
      const piv = posicionPivote(ini, fin);
      quicksort(ini, piv - 1);
      quicksort(piv + 1, fin);
    }
  }
  quicksort(0, fin_c-1);
  ret lista;
}

# importa ':red' como Red;
# importa ':proto/Cadena' como Cadena;
# 
# asinc fn servidorHTTP(servidor, puerto){
#   espera Red::servidorTCP("127.0.0.1:{puerto}", asinc fn (req){
#     def res = espera servidor(espera req::leer());
#     espera req::escribir(res);
#   });
# }
# 
# espera servidorHTTP(asinc fn(req){
#   Consola::pintar(req);
#   const peticion_cruda = Cadena(req);
#   const r = peticion_cruda::remplaza('\r','')::partir('\n');
#   def data = r[0];
#   si(data=='GET /favicon.ico HTTP/1.1') ret 'HTTP/1.1 301\nLocation: https://aga-mca.pages.dev/favicon.ico'::bytes();
#   ret "HTTP/1.1 200\nContent-Type: text/plain; charset=utf-8\n\nÂ¡Hola {data}!"::bytes();
# }, 80);