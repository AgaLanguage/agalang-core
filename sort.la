importa ':mate' como Mate;
fn ordenar(lista) {
  def fin_c = lista::longitud;
  si fin_c <= 0 {
    ret lista;
  }
  fn medioDeTres(ini, fin) {
      def a = lista[ini];
      def b = lista[fin];
      def c = lista[~((ini + fin) / 2)];
      ret Mate::min(Mate::max(a,b),Mate::max(b,c), Mate::max(c,a));
  }
  fn posicionPivote(ini, fin) {
    const pivote = medioDeTres(ini, fin);
    def i = ini;
    def j = ini;
    mien j < fin{
      si lista[j] < pivote {
        def temp = lista[i];
        lista[i] = lista[j];
        lista[j] = temp;
        i+=1;
      }
      j+=1;
    }
    def temp = lista[i];
    lista[i] = lista[fin];
    lista[fin] = temp;
    ret i;
  }
  fn quicksort(ini, fin) {
    si ini < fin {
      const piv = posicionPivote(ini, fin);
      quicksort(ini, piv - 1);
      quicksort(piv + 1, fin);
    }
  }
  quicksort(0, fin_c-1);
  ret lista;
}
exporta nombre ordenar;